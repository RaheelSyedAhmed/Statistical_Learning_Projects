xlab = "Principal Component", ylab = "Proportion of Variance Explained",
ylim = c(0,1), type = 'b')
plot(cumsum(state_pve),
xlab = "Principal Component", ylab = "Proportion of Variance Explained",
ylim = c(0,1), type = 'b')
state_corr <- cbind(data.frame(state_pca$rotation[,1]*state_pca$sdev[1]), state_pca$rotation[,2]*state_pca$sdev[2])
colnames(state_corr) <- c("PC1", "PC2")
state_corr
state_pca$rotation[,1]*state_pca$sdev[1]
state_pca$rotation[,2]*state_pca$sdev[2]
cumsum(state_pve)
cumsum(state_pve)[1:2]
biplot(state_pca, scale=0)
planet_data <- read.csv("planet.csv")
sd(planet_data$Period)
hist(planet_data$Mass)
hist(planet_data$Period)
hist(planet_data$Eccentricity)
cor(planet_data)
plot(planet_data$Mass, planet_data$Period)
plot(planet_data$Mass, planet_data$Eccentricity)
plot(planet_data$Eccentricity, planet_data$Period)
plot(planet_data$Period/sum(planet_data$Period), type="l")
lines(planet_data$Mass/sum(planet_data$Mass), col="red")
lines(planet_data$Eccentricity/sum(planet_data$Eccentricity), col = "blue")
legend("topleft",legend=c("Period","Mass","Eccentricity"),pch=15,col=c("black", "red","blue"))
scaled_planet_data <- data.frame(scale(planet_data))
plot(scaled_planet_data$Period, type="l")
lines(scaled_planet_data$Mass, col="red")
lines(scaled_planet_data$Eccentricity, col = "blue")
legend("topleft",legend=c("Period","Mass","Eccentricity"),pch=15,col=c("black", "red","blue"))
hc.complete <- hclust(dist(scaled_planet_data), method = "complete")
plot(hc.complete, main = "Complete Linkage", xlab = "", sub = "",
cex = 0.6)
three_cut <- cutree(hc.complete, k = 3)
clust1 <- planet_data[which(three_cut == 1),]
clust1_means <- apply(clust1, 2, mean)
clust2 <- planet_data[which(three_cut == 2),]
clust2_means <- apply(clust2, 2, mean)
clust3 <- planet_data[which(three_cut == 3),]
clust3_means <- apply(clust3, 2, mean)
pairs(planet_data, pch=19, col=(three_cut+1))
legend("topleft",legend=c("Cluster 1","Cluster 2","Cluster 3"),pch=15,col=c(1,2,3))
hist(planet_data$Mass)
hist(planet_data$Period)
hist(planet_data$Eccentricity)
plot(planet_data$Period/sum(planet_data$Period), type="l")
lines(planet_data$Mass/sum(planet_data$Mass), col="red")
lines(planet_data$Eccentricity/sum(planet_data$Eccentricity), col = "blue")
# Bivariate relations
cor(planet_data)
hc.complete <- hclust(dist(scaled_planet_data), method = "complete")
cutree(hc.complete, k = 3)
sd(planet_data$Period)
three_cut <- cutree(hc.complete, k = 3)
clust1 <- planet_data[which(three_cut == 1),]
clust1_means <- apply(clust1, 2, mean)
clust1_means
?pairs
pairs(planet_data, pch=19, col=(three_cut+1))
legend("topleft",legend=c("Cluster 1","Cluster 2","Cluster 3"),pch=15,col=c(1,2,3))
?kmeans
km.out <- kmeans(scaled_planet_data, 3, nstart = 20)
km.out
hc.complete
names(hc.complete)
hc.complete$method
hc.complete$order
km.out
km.out$cluster
sum(km.out$cluster)
plot(scaled_planet_data, col = (km.out$cluster + 1), main = "K-Means Clustering Results with K=3", xlab = "", ylab = "", pch = 20, cex = 2)
plot(scaled_planet_data, main = "K-Means Clustering Results with K=3", xlab = "", ylab = "", pch = 20, cex = 2)
plot(scaled_planet_data, main = "K-Means Clustering Results with K=3", pch = 20, cex = 2)
plot(scaled_planet_data, col = (km.out$cluster + 1), main = "K-Means Clustering Results with K=3", pch = 20, cex = 2)
plot(scaled_planet_data, col = (km.out$cluster + 1), main = "K-Means Clustering Results with K=3", pch = 19, cex = 0.6)
plot(scaled_planet_data, col = (km.out$cluster + 1), main = "K-Means Clustering Results with K=3", pch = 19, cex = 1)
plot(hc.complete, col=(three_cut+1), main = "Hierarchical Clustering with Scaled Features", xlab = "", sub = "", cex = 0.7)
plot(scaled_planet_data, col = (km.out$cluster + 1), main = "K-Means Clustering Results with K=3", pch = 19, cex = 1)
km.out$centers
library(pls)
pc_data <- read.csv("prostate_cancer.csv")
library(pls)
pc_data <- read.csv("prostate_cancer.csv")
View(pc_data)
pc_data <- pc_data[,-1]
View(pc_data)
# Treat vesinv as a qualitative variable
pc_data$vesinv <- factor(pc_data$vesinv, order=F, levels = c(0, 1))
hist(pc_data[, 1])
hist(pc_data$psa)
pc_data[, 1] <- log(pc_data[, 1])
hist(pc_data$psa)
knitr::opts_chunk$set(echo = TRUE)
?pcr
prostate_pcr <- pcr(psa ~ ., data = pc_data, scale = TRUE, validation = "CV", segments = 10)
summary(prostate_pcr)
MSEP(prostate_pcr)
sqrt(MSEP(pcr.fit)$val[1, 1,])
MSEP(prostate_pcr)$val[1, 1,]
MSE <- MSEP(prostate_pcr)$val[1, 1,]
which.min(MSE)
validationplot(pcr.fit, val.type = "MSEP")
validationplot(prostate_pcr, val.type = "MSEP")
prostate_pcr <- pcr(psa ~ ., data = pc_data, scale = TRUE, validation = "CV", segments = 1)
summary(prostate_pcr)
MSE <- MSEP(prostate_pcr)$val[1, 1,]
which.min(MSE)
# Confirmation of minimum MSE point
validationplot(prostate_pcr, val.type = "MSEP")
prostate_pcr_pred <- predict(prostate_pcr, pc_data, ncomp = 1)
prostate_pcr_pred
pc_data$psa
mean((prostate_pcr_pred - pc_data$psa)^2)
?plsr
prostate_pcr <- pcr(psa ~ ., data = pc_data, scale = TRUE, validation = "CV", segments = nrow(pc_data))
summary(prostate_pcr)
MSE <- MSEP(prostate_pcr)$val[1, 1,]
which.min(MSE)
# Confirmation of minimum MSE point
validationplot(prostate_pcr, val.type = "MSEP")
prostate_pcr_pred <- predict(prostate_pcr, pc_data, ncomp = 1)
mean((prostate_pcr_pred - pc_data$psa)^2)
?pcr
prostate_pcr <- pcr(psa ~ ., data = pc_data, scale = TRUE, validation="LOO")
summary(prostate_pcr)
MSE <- MSEP(prostate_pcr)$val[1, 1,]
which.min(MSE)
# Confirmation of minimum MSE point
validationplot(prostate_pcr, val.type = "MSEP")
prostate_pcr_pred <- predict(prostate_pcr, pc_data, ncomp = 1)
mean((prostate_pcr_pred - pc_data$psa)^2)
MSE
prostate_pcr <- pcr(psa ~ ., data = pc_data, scale = TRUE, validation="LOO")
summary(prostate_pcr)
MSE <- MSEP(prostate_pcr)$val[1, 1,]
MSEP(prostate_pcr)$val[1, 1,]
MSE
# Test MSE
min(MSE)
planet_data <- read.csv("planet.csv")
scaled_planet_data <- data.frame(scale(planet_data))
km.out <- kmeans(scaled_planet_data, 3, nstart = 20)
km.out$centers
plot(scaled_planet_data, col = (km.out$cluster + 1), main = "K-Means Clustering Results with K=3", pch = 19, cex = 1)
hc.complete <- hclust(dist(scaled_planet_data), method = "complete")
plot(hc.complete, main = "Complete Linkage", xlab = "", sub = "",
cex = 0.6)
pairs(planet_data, pch=19, col=(three_cut+1))
three_cut <- cutree(hc.complete, k = 3)
pairs(planet_data, pch=19, col=(three_cut+1))
prostate_pcr <- plsr(psa ~ ., data = pc_data, scale = TRUE, validation="LOO")
prostate_pcr <- pcr(psa ~ ., data = pc_data, scale = TRUE, validation="LOO")
prostate_pls <- plsr(psa ~ ., data = pc_data, scale = TRUE, validation="LOO")
MSE <- MSEP(prostate_pls)$val[1, 1,]
prostate_pcr <- pcr(psa ~ ., data = pc_data, scale = TRUE, validation="LOO")
summary(prostate_pcr)
pcr_MSE <- MSEP(prostate_pcr)$val[1, 1,]
which.min(pcr_MSE)
# Confirmation of minimum MSE point
validationplot(prostate_pcr, val.type = "MSEP")
# Test MSE
min(pcr_MSE)
prostate_pcr_pred <- predict(prostate_pcr, pc_data, ncomp = 1)
mean((prostate_pcr_pred - pc_data$psa)^2)
prostate_pls <- plsr(psa ~ ., data = pc_data, scale = TRUE, validation="LOO")
pls_MSE <- MSEP(prostate_pls)$val[1, 1,]
which.min(pls_MSE)
pls_MSE
validationplot(prostate_pls, val.type="MSEP")
min(pls_MSE)
plot(scaled_planet_data, col = (km.out$cluster + 1), main = "K-Means Clustering Results with K=3", pch = 19, cex = 1)
# Read in planet data from planet.csv
planet_data <- read.csv("planet.csv")
# The standard deviation of planet data features can be large and vary greatly
sd(planet_data$Period)
# Range via visual inspection of values is also quite different.
max(planet_data$Mass) - min(planet_data$Mass)
# Range via visual inspection of values is also quite different.
max(planet_data$Mass) - min(planet_data$Mass)
max(planet_data$Period) - min(planet_data$Period)
max(planet_data$Eccentricity) - min(planet_data$Eccentricity)
# See dimensions of data
nrow(state_data)
ncol(state_data)
# The standard deviation of planet data features can be large and vary greatly
sd(planet_data$Period)
# Range via visual inspection of values is also quite different.
max(planet_data$Mass) - min(planet_data$Mass)
max(planet_data$Period) - min(planet_data$Period)
max(planet_data$Eccentricity) - min(planet_data$Eccentricity)
# Univariate distributions
hist(planet_data$Mass)
hist(planet_data$Period)
hist(planet_data$Eccentricity)
# Bivariate relations
cor(planet_data)
plot(planet_data$Mass, planet_data$Period)
plot(planet_data$Mass, planet_data$Eccentricity)
plot(planet_data$Eccentricity, planet_data$Period)
# Variable index of normalized planet data
plot(planet_data$Period/sum(planet_data$Period), type="l")
lines(planet_data$Mass/sum(planet_data$Mass), col="red")
lines(planet_data$Eccentricity/sum(planet_data$Eccentricity), col = "blue")
legend("topleft",legend=c("Period","Mass","Eccentricity"),pch=15,col=c("black", "red","blue"))
# Variable index of scaled planet data
scaled_planet_data <- data.frame(scale(planet_data))
plot(scaled_planet_data$Period, type="l")
lines(scaled_planet_data$Mass, col="red")
lines(scaled_planet_data$Eccentricity, col = "blue")
legend("topleft",legend=c("Period","Mass","Eccentricity"),pch=15,col=c("black", "red","blue"))
# Hierarchical clustering of scaled planet data using metric (euclidean) distance
# and complete link
hc.complete <- hclust(dist(scaled_planet_data), method = "complete")
plot(hc.complete, main = "Complete Linkage", xlab = "", sub = "", cex = 0.6)
# Get cluster assignments of all observations
three_cut <- cutree(hc.complete, k = 3)
# Find cluster-specific means by selecting rows matching cutree results
clust1 <- planet_data[which(three_cut == 1),]
# Then applying mean function over columns to figure out feature means
clust1_means <- apply(clust1, 2, mean)
# Repeat for cluster 2 and cluster 3 observations respectively
clust2 <- planet_data[which(three_cut == 2),]
clust2_means <- apply(clust2, 2, mean)
clust3 <- planet_data[which(three_cut == 3),]
clust3_means <- apply(clust3, 2, mean)
# Show pairwise plot of original planet data with colors based off of cutree results
# to indicate which observation is in which cluster
pairs(planet_data, pch=19, col=(three_cut+1))
# Repeat the process but with K-means where K = 3
km.out <- kmeans(scaled_planet_data, 3, nstart = 20)
# Print out the centers values to get cluster-specific means
km.out$centers
plot(planet_data, col = (km.out$cluster + 1), main = "K-Means Clustering Results with K=3", pch = 19, cex = 1)
?upper.panel
??upper.panel
?pairs
# Show pairwise plot of original planet data with colors based off of cutree results
# to indicate which observation is in which cluster
pairs(planet_data, pch=19, col=(three_cut+1), upper.panel = NA)
# Show pairwise plot of original planet data with colors based off of cutree results
# to indicate which observation is in which cluster
pairs(planet_data, pch=19, col=(three_cut+1), upper.panel = F)
# Show pairwise plot of original planet data with colors based off of cutree results
# to indicate which observation is in which cluster
pairs(planet_data, pch=19, col=(three_cut+1), upper.panel = NULL)
plot(planet_data, col = (km.out$cluster + 1), main = "K-Means Clustering Results with K=3", pch = 19, cex = 1, upper.panel = NULL)
legend("topleft",legend=c("Period","Mass","Eccentricity"),pch=15,col=c("black", "red","blue"))
library(pls)
# Read in pc data and remove subject column
pc_data <- read.csv("prostate_cancer.csv")
pc_data <- pc_data[,-1]
# Treat vesinv as a qualitative variable
pc_data$vesinv <- factor(pc_data$vesinv, order=F, levels = c(0, 1))
# Conduct a natural log transformation on the response
# to adjust it's distribution to something more appropriate.
pc_data[, 1] <- log(pc_data[, 1])
hist(pc_data$psa)
# Calculate LOOCV estimate of MSE via pcr regression on prostate cancer data
prostate_pcr <- pcr(psa ~ ., data = pc_data, scale = TRUE, validation="LOO")
# Summary will provide more information
summary(prostate_pcr)
# Store MSE information for all components
pcr_MSE <- MSEP(prostate_pcr)$val[1, 1,]
# Find number of components corresponding to minimum MSE
which.min(pcr_MSE)
# Confirmation of minimum MSE point
validationplot(prostate_pcr, val.type = "MSEP")
# Test MSE
min(pcr_MSE)
# Train MSE
prostate_pcr_pred <- predict(prostate_pcr, pc_data, ncomp = 1)
mean((prostate_pcr_pred - pc_data$psa)^2)
# Calculate LOOCV estimate of MSE via a PLS regression on the prostate cancer data
prostate_pls <- plsr(psa ~ ., data = pc_data, scale = TRUE, validation="LOO")
# Store MSE information for all components for the PLS regression
pls_MSE <- MSEP(prostate_pls)$val[1, 1,]
# Find number of components corresponding to minimum MSE for the PLS regression
which.min(pls_MSE)
# Confirm minimum MSE point for the PLS regression
validationplot(prostate_pls, val.type="MSEP")
# Test MSE
min(pls_MSE)
# Confirmation of minimum MSE point
validationplot(prostate_pcr, val.type = "MSEP")
# Confirm minimum MSE point for the PLS regression
validationplot(prostate_pls, val.type="MSEP")
# Test MSE
min(pls_MSE)
library(datasets)
# Read in state data
state_data <- state.x77
# See dimensions of data
nrow(state_data)
ncol(state_data)
#Standard deviation of population, income, and area
sd(state_data[,1])
sd(state_data[,2])
sd(state_data[,8])
# correlation matrix of data
cor(state_data)
#Standard deviation of population, income, and area
sd(state_data[,1])
sd(state_data[,2])
sd(state_data[,8])
state_data[,1]
hist(state_data[,1])
hist(state_data[,2])
hist(state_data[,3])
hist(state_data[,4])
hist(state_data[,5])
hist(state_data[,6])
hist(state_data[,7])
hist(state_data[,8])
par(mfrow=c(4,2))
for (feature in 1:ncol(state_data)) {
hist(state_data[,feature])
}
# Scale state data for PCA
state_data <- scale(state_data)
state_pca <- prcomp((state_data), center = T, scale = T)
# Eigenvectors, scores, and variances provided via rotation, x, and stdev squared
state_pca$rotation
state_pca$x
state_pca_var <- state_pca$sdev^2
# Find proportion of variance explained by normalizing variances
state_pve <- state_pca_var / sum(state_pca_var)
# Prove that the cumulative sum of the PVEs is 1.
cumsum(state_pve)
# Plot PVE on a scree plot to find number of principal components to use
plot(state_pve,
xlab = "Principal Component", ylab = "Proportion of Variance Explained",
ylim = c(0,1), type = 'b')
par(mfrow=c(1,1))
# Plot PVE on a scree plot to find number of principal components to use
plot(state_pve,
xlab = "Principal Component", ylab = "Proportion of Variance Explained",
ylim = c(0,1), type = 'b')
state_corr <- cbind(data.frame(state_pca$rotation[,1]*state_pca$sdev[1]), state_pca$rotation[,2]*state_pca$sdev[2])
colnames(state_corr) <- c("PC1", "PC2")
state_corr
# Proportion of variance explained summed for the first two Principal Components.
cumsum(state_pve)[1:2]
# Biplot of scores and loadings
biplot(state_pca, scale=0)
# Read in planet data from planet.csv
planet_data <- read.csv("planet.csv")
# Number of observations and features
nrow(planet_data)
ncol(planet_data)
# The standard deviation of planet data features can be large and vary greatly
sd(planet_data$Period)
# Range via visual inspection of values is also quite different.
max(planet_data$Mass) - min(planet_data$Mass)
max(planet_data$Period) - min(planet_data$Period)
max(planet_data$Eccentricity) - min(planet_data$Eccentricity)
# Univariate distributions
hist(planet_data$Mass)
hist(planet_data$Period)
hist(planet_data$Eccentricity)
hist(planet_data$Mass)
hist(planet_data$Period)
hist(planet_data$Eccentricity)
# Univariate distributions
par(mfrow=c(1,3))
hist(planet_data$Mass)
hist(planet_data$Period)
hist(planet_data$Eccentricity)
# Univariate distributions
par(mfrow=c(1,3))
hist(planet_data$Mass, main="Mass")
hist(planet_data$Period, main="Period")
hist(planet_data$Eccentricity, main="Eccentricity")
# Bivariate relations
cor(planet_data)
plot(planet_data$Mass, planet_data$Period)
plot(planet_data$Mass, planet_data$Eccentricity)
plot(planet_data$Eccentricity, planet_data$Period)
# Variable index of normalized planet data
par(mfrow=c(1,1))
plot(planet_data$Period/sum(planet_data$Period), type="l")
lines(planet_data$Mass/sum(planet_data$Mass), col="red")
# Bivariate relations
cor(planet_data)
plot(planet_data$Mass, planet_data$Period)
plot(planet_data$Mass, planet_data$Eccentricity)
plot(planet_data$Eccentricity, planet_data$Period)
# Variable index of normalized planet data
plot(planet_data$Period/sum(planet_data$Period), type="l")
lines(planet_data$Mass/sum(planet_data$Mass), col="red")
lines(planet_data$Eccentricity/sum(planet_data$Eccentricity), col = "blue")
library(datasets)
# Read in state data
state_data <- state.x77
# See dimensions of data
nrow(state_data)
ncol(state_data)
# correlation matrix of data
cor(state_data)
#Standard deviation of population, income, and area
sd(state_data[,1])
sd(state_data[,2])
sd(state_data[,8])
# Display histograms of all features
par(mfrow=c(4,2))
# Display histograms of all features
par(mfrow=c(2,4))
for (feature in 1:ncol(state_data)) {
hist(state_data[,feature])
}
for (feature in 1:ncol(state_data)) {
hist(state_data[,feature], main=feature)
}
colnames(state_data)[feature]
for (feature in 1:ncol(state_data)) {
hist(state_data[,feature], main=colnames(state_data)[feature])
}
# Variable index of normalized planet data
par(mfrow=c(1,1))
# Variable index of normalized planet data
plot(planet_data$Period/sum(planet_data$Period), type="l")
lines(planet_data$Mass/sum(planet_data$Mass), col="red")
lines(planet_data$Eccentricity/sum(planet_data$Eccentricity), col = "blue")
legend("topleft",legend=c("Period","Mass","Eccentricity"),
pch=15, col=c("black", "red","blue"))
# Read in planet data from planet.csv
planet_data <- read.csv("planet.csv")
# Variable index of normalized planet data
plot(planet_data$Period/sum(planet_data$Period), type="l")
lines(planet_data$Mass/sum(planet_data$Mass), col="red")
lines(planet_data$Eccentricity/sum(planet_data$Eccentricity), col = "blue")
legend("topleft",legend=c("Period","Mass","Eccentricity"),
pch=15, col=c("black", "red","blue"))
# Hierarchical clustering of scaled planet data using metric (euclidean) distance
# and complete link
hc.complete <- hclust(dist(scaled_planet_data), method = "complete")
plot(hc.complete, main = "Complete Linkage HC Dendogram",
xlab = "", sub = "", cex = 0.6)
# Read in planet data from planet.csv
planet_data <- read.csv("planet.csv")
# Number of observations and features
nrow(planet_data)
ncol(planet_data)
# The standard deviation of planet data features can be large and vary greatly
sd(planet_data$Period)
# Range via visual inspection of values is also quite different.
max(planet_data$Mass) - min(planet_data$Mass)
max(planet_data$Period) - min(planet_data$Period)
max(planet_data$Eccentricity) - min(planet_data$Eccentricity)
# Univariate distributions
par(mfrow=c(1,3))
hist(planet_data$Mass, main="Mass")
hist(planet_data$Period, main="Period")
hist(planet_data$Eccentricity, main="Eccentricity")
# Bivariate relations
cor(planet_data)
plot(planet_data$Mass, planet_data$Period)
plot(planet_data$Mass, planet_data$Eccentricity)
plot(planet_data$Eccentricity, planet_data$Period)
# Variable index of normalized planet data
plot(planet_data$Period/sum(planet_data$Period), type="l")
lines(planet_data$Mass/sum(planet_data$Mass), col="red")
lines(planet_data$Eccentricity/sum(planet_data$Eccentricity), col = "blue")
legend("topleft",legend=c("Period","Mass","Eccentricity"),
pch=15, col=c("black", "red","blue"))
# Variable index of scaled planet data
scaled_planet_data <- data.frame(scale(planet_data))
plot(scaled_planet_data$Period, type="l")
lines(scaled_planet_data$Mass, col="red")
lines(scaled_planet_data$Eccentricity, col = "blue")
legend("topleft",legend=c("Period","Mass","Eccentricity"),
pch=15, col=c("black", "red","blue"))
# Hierarchical clustering of scaled planet data using metric (euclidean) distance
# and complete link
hc.complete <- hclust(dist(scaled_planet_data), method = "complete")
par(mfrow=c(1,1))
# Hierarchical clustering of scaled planet data using metric (euclidean) distance
# and complete link
hc.complete <- hclust(dist(scaled_planet_data), method = "complete")
plot(hc.complete, main = "Complete Linkage HC Dendogram",
xlab = "", sub = "", cex = 0.6)
# Hierarchical clustering of scaled planet data using metric (euclidean) distance
# and complete link
hc.complete <- hclust(dist(scaled_planet_data), method = "complete")
plot(hc.complete, main = "Complete Linkage HC Dendrogram",
xlab = "", sub = "", cex = 0.6)
# Get cluster assignments of all observations
three_cut <- cutree(hc.complete, k = 3)
# Find cluster-specific means by selecting rows matching cutree results
clust1 <- planet_data[which(three_cut == 1),]
# Then applying mean function over columns to figure out feature means
clust1_means <- apply(clust1, 2, mean)
clust1_means
# Repeat for cluster 2 and cluster 3 observations respectively
clust2 <- planet_data[which(three_cut == 2),]
clust2_means <- apply(clust2, 2, mean)
clust2_means
clust3 <- planet_data[which(three_cut == 3),]
clust3_means <- apply(clust3, 2, mean)
clust3_means
# Show pairwise plot of original planet data with colors based off of cutree results
# to indicate which observation is in which cluster
pairs(planet_data, pch=19, col=(three_cut+1), upper.panel = NULL)
# Repeat the process but with K-means where K = 3
km.out <- kmeans(scaled_planet_data, 3, nstart = 20)
# Print out the centers values to get cluster-specific means
km.out$centers
# Display pairwise plot of original planet data with
# colors based off of K-means cluster assignments
plot(planet_data, col = (km.out$cluster + 1),
main = "K-Means Clustering Results with K=3",
pch = 19, cex = 1, upper.panel = NULL)
